"""
Deploy with proper MONAD gas settings
"""

import os
from web3 import Web3
from eth_account import Account
from dotenv import load_dotenv

load_dotenv('../.env')

def deploy_with_proper_gas():
    w3 = Web3(Web3.HTTPProvider("https://testnet-rpc.monad.xyz"))
    
    private_key = os.getenv('MONAD_PRIVATE_KEY').strip('"')
    account = Account.from_key(private_key)
    
    print(f"‚úÖ Connected to MONAD")
    print(f"üìù Account: {account.address}")
    
    # Get current gas price from network
    gas_price = w3.eth.gas_price
    print(f"üí∞ Network gas price: {gas_price} wei ({w3.from_wei(gas_price, 'gwei')} gwei)")
    
    # Use higher gas price for MONAD
    adjusted_gas_price = int(gas_price * 2)  # 2x network price
    
    # Minimal bytecode for simple storage contract
    bytecode = "0x608060405234801561001057600080fd5b50600180819055506103e8806100276000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80636057361d1461003b578063b05784b814610057575b600080fd5b61005560048036038101906100509190610175565b610075565b005b61005f61007f565b60405161006c91906101b1565b60405180910390f35b8060008190555050565b60008054905090565b600080fd5b6000819050919050565b61009f8161008c565b81146100aa57600080fd5b50565b6000813590506100bc81610096565b92915050565b6000602082840312156100d8576100d7610087565b5b60006100e6848285016100ad565b91505092915050565b6100f88161008c565b82525050565b600060208201905061011360008301846100ef565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061016057607f821691505b60208210810361017357610172610119565b5b5091905056fea2646970667358221220abcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdef64736f6c63430008130033"
    
    transaction = {
        'from': account.address,
        'data': bytecode,
        'gas': 200000,
        'gasPrice': adjusted_gas_price,
        'nonce': w3.eth.get_transaction_count(account.address),
        'chainId': 10143
    }
    
    print(f"üì§ Deploying with gas price: {w3.from_wei(adjusted_gas_price, 'gwei')} gwei")
    
    signed_txn = w3.eth.account.sign_transaction(transaction, private_key)
    tx_hash = w3.eth.send_raw_transaction(signed_txn.raw_transaction)
    
    print(f"‚è≥ TX: {tx_hash.hex()}")
    
    receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
    
    if receipt.status == 1:
        contract_address = receipt.contractAddress
        print(f"‚úÖ Simple contract deployed: {contract_address}")
        print(f"üîó Explorer: https://testnet-explorer.monad.xyz/address/{contract_address}")
        
        # Now deploy the actual passport contract
        passport_bytecode = "0x608060405234801561001057600080fd5b50600180819055506106f4806100276000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630f2cdd6c146100465780636352211e14610076578063a22cb46514610092575b600080fd5b610060600480360381019061005b9190610456565b6100ae565b60405161006d91906105a2565b60405180910390f35b610090600480360381019061008b91906105c4565b610204565b005b6100ac60048036038101906100a791906105f1565b610208565b005b60606000806000806000600260008781526020019081526020016000206040518060a0016040529081600082018054610100a690610660565b80601f01602080910402602001604051908101604052809291908181526020018280546100d290610660565b801561011f5780601f106100f45761010080835404028352916020019161011f565b820191906000526020600020905b81548152906001019060200180831161010257829003601f168201915b505050505081526020016001820180546101389061066f565b80601f01602080910402602001604051908101604052809291908181526020018280546101649061066f565b80156101b15780601f10610186576101008083540402835291602001916101b1565b820191906000526020600020905b81548152906001019060200180831161019457829003601f168201915b50505050508152602001600282018054610100a690610660565b80601f01602080910402602001604051908101604052809291908181526020018280546101f690610660565b80156102435780601f1061021857610100808354040283529160200191610243565b820191906000526020600020905b81548152906001019060200180831161022657829003601f168201915b505050505081526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820154815250509050806000015181602001518260400151836060015184608001519550955095509550955050919395509193565b5050565b5050565b600080fd5b600080fd5b6000819050919050565b61022981610216565b811461023457600080fd5b50565b60008135905061024681610220565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61029f82610250565b810181811067ffffffffffffffff821117156102be576102bd610261565b5b80604052505050565b60006102d1610202565b90506102dd8282610296565b919050565b600067ffffffffffffffff8211156102fd576102fc610261565b5b61030682610250565b9050602081019050919050565b82818337600083830152505050565b600061033561033084610100e2565b6102c7565b90508281526020810184848401111561035157610350610100b565b5b61035c848285610313565b509392505050565b600082601f8301126103795761037861024c565b5b8135610389848260208601610322565b91505092915050565b6000806000606084860312156103ab576103aa61020c565b5b600084013567ffffffffffffffff8111156103c9576103c8610211565b5b6103d586828701610364565b935050602084013567ffffffffffffffff8111156103f6576103f5610211565b5b61040286828701610364565b925050604084013567ffffffffffffffff81111561042357610422610211565b5b61042f86828701610364565b9150509250925092565b61044281610216565b82525050565b600060208201905061045d6000830184610439565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561049d578082015181840152602081019050610482565b838111156104ac576000848401525b50505050565b60006104bd82610463565b6104c7818561046e565b93506104d781856020860161047f565b6104e081610250565b840191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610516826104eb565b9050919050565b6105268161050b565b82525050565b6000819050919050565b61053f8161052c565b82525050565b600060a08201905081810360008301526105608188610100b2565b905081810360208301526105748187610100b2565b905081810360408301526105888186610100b2565b905061059760608301856105d1565b6105a46080830184610536565b9695505050505050565b6000602082840312156105c4576105c361020c565b5b60006105d284828501610237565b91505092915050565b600080604083850312156105f2576105f1610211565b5b600061060085828601610237565b925050602083013567ffffffffffffffff81111561062157610620610211565b5b61062d85828601610364565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061067857607f821691505b60208210810361068b5761068a610637565b5b5091905056fea2646970667358221220abcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdef64736f6c63430008130033"
        
        # Deploy passport contract with same gas settings
        passport_tx = {
            'from': account.address,
            'data': passport_bytecode,
            'gas': 400000,
            'gasPrice': adjusted_gas_price,
            'nonce': w3.eth.get_transaction_count(account.address),
            'chainId': 10143
        }
        
        print("üì§ Deploying passport contract...")
        
        signed_passport = w3.eth.account.sign_transaction(passport_tx, private_key)
        passport_hash = w3.eth.send_raw_transaction(signed_passport.raw_transaction)
        
        print(f"‚è≥ Passport TX: {passport_hash.hex()}")
        
        passport_receipt = w3.eth.wait_for_transaction_receipt(passport_hash)
        
        if passport_receipt.status == 1:
            passport_address = passport_receipt.contractAddress
            print(f"‚úÖ Passport contract deployed: {passport_address}")
            print(f"üîó Explorer: https://testnet-explorer.monad.xyz/address/{passport_address}")
            
            # Update config with working contract
            config_content = f"""
# MONAD Testnet Configuration for Krishi Sahayak

MONAD_TESTNET_CONFIG = {{
    'network_name': 'MONAD Testnet',
    'chain_id': 10143,
    'rpc_url': 'https://testnet-rpc.monad.xyz',
    'explorer_url': 'https://testnet-explorer.monad.xyz',
    'currency_symbol': 'MON',
    'currency_decimals': 18,
    'block_time': 1,
}}

CONTRACT_ADDRESSES = {{
    'crop_passport': '{passport_address}',
    'weather_insurance': None,
}}

IPFS_CONFIG = {{
    'gateway': 'https://gateway.pinata.cloud/ipfs/',
    'api_endpoint': 'https://api.pinata.cloud',
    'upload_endpoint': 'https://api.pinata.cloud/pinning/pinFileToIPFS'
}}

GAS_CONFIG = {{
    'gas_limit': 300000,
    'gas_price': {adjusted_gas_price},
    'max_fee_per_gas': {int(adjusted_gas_price * 1.5)},
    'max_priority_fee_per_gas': {adjusted_gas_price},
}}
"""
            
            with open('../blockchain/monad_config.py', 'w') as f:
                f.write(config_content)
            
            return passport_address
        else:
            print("‚ùå Passport deployment failed")
            return contract_address
    else:
        print("‚ùå Deployment failed")
        return None

if __name__ == "__main__":
    deploy_with_proper_gas()