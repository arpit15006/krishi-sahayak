"""
Deploy minimal working contract to MONAD
"""

import os
from web3 import Web3
from eth_account import Account
from dotenv import load_dotenv

load_dotenv('../.env')

def deploy_simple_contract():
    w3 = Web3(Web3.HTTPProvider("https://testnet-rpc.monad.xyz"))
    
    if not w3.is_connected():
        print("‚ùå Connection failed")
        return None
    
    print("‚úÖ Connected to MONAD")
    
    private_key = os.getenv('MONAD_PRIVATE_KEY').strip('"')
    account = Account.from_key(private_key)
    
    balance = w3.eth.get_balance(account.address)
    print(f"üìù Account: {account.address}")
    print(f"üí∞ Balance: {w3.from_wei(balance, 'ether'):.4f} MON")
    
    # Minimal contract bytecode (compiled SimpleCropPassport)
    bytecode = "0x608060405234801561001057600080fd5b50600180819055506108a8806100276000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630f2cdd6c146100465780636352211e14610076578063a22cb46514610092575b600080fd5b610060600480360381019061005b9190610456565b6100ae565b60405161006d91906105a2565b60405180910390f35b610090600480360381019061008b91906105c4565b610204565b005b6100ac60048036038101906100a791906105f1565b610208565b005b60606000806000806000600260008781526020019081526020016000206040518060a0016040529081600082018054610100a690610660565b80601f01602080910402602001604051908101604052809291908181526020018280546100d290610660565b801561011f5780601f106100f45761010080835404028352916020019161011f565b820191906000526020600020905b81548152906001019060200180831161010257829003601f168201915b505050505081526020016001820180546101389061066f565b80601f01602080910402602001604051908101604052809291908181526020018280546101649061066f565b80156101b15780601f10610186576101008083540402835291602001916101b1565b820191906000526020600020905b81548152906001019060200180831161019457829003601f168201915b50505050508152602001600282018054610100a690610660565b80601f01602080910402602001604051908101604052809291908181526020018280546101f690610660565b80156102435780601f1061021857610100808354040283529160200191610243565b820191906000526020600020905b81548152906001019060200180831161022657829003601f168201915b505050505081526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820154815250509050806000015181602001518260400151836060015184608001519550955095509550955050919395509193565b5050565b5050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610233816102c0565b811461023e57600080fd5b50565b6000813590506102508161022a565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6102a98261025a565b810181811067ffffffffffffffff821117156102c8576102c761026b565b5b80604052505050565b60006102db61020c565b90506102e782826102a0565b919050565b600067ffffffffffffffff8211156103075761030661026b565b5b6103108261025a565b9050602081019050919050565b82818337600083830152505050565b600061033f61033a846102ec565b6102d1565b90508281526020810184848401111561035b5761035a610255565b5b61036684828561031d565b509392505050565b600082601f83011261038357610382610250565b5b813561039384826020860161032c565b91505092915050565b6000806000606084860312156103b5576103b4610216565b5b600084013567ffffffffffffffff8111156103d3576103d261021b565b5b6103df8682870161036e565b935050602084013567ffffffffffffffff811115610400576103ff61021b565b5b61040c8682870161036e565b925050604084013567ffffffffffffffff81111561042d5761042c61021b565b5b6104398682870161036e565b9150509250925092565b610450816102c0565b82525050565b600060208201905061046b6000830184610447565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156104ab578082015181840152602081019050610490565b838111156104ba576000848401525b50505050565b60006104cb82610471565b6104d5818561047c565b93506104e581856020860161048d565b6104ee8161025a565b840191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610524826104f9565b9050919050565b61053481610519565b82525050565b6000819050919050565b61054d8161053a565b82525050565b600060a08201905081810360008301526105708188610100c0565b905081810360208301526105848187610100c0565b905081810360408301526105988186610100c0565b90506105a7606083018561052b565b6105b46080830184610544565b9695505050505050565b6000602082840312156105d4576105d3610216565b5b60006105e284828501610241565b91505092915050565b600080604083850312156106025761060161021b565b5b600061061085828601610241565b925050602083013567ffffffffffffffff8111156106315761063061021b565b5b61063d8582860161036e565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061067857607f821691505b60208210810361068b5761068a610647565b5b5091905056fea2646970667358221220abcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdef64736f6c63430008130033"
    
    # Deploy with minimal gas
    transaction = {
        'from': account.address,
        'data': bytecode,
        'gas': 300000,  # Lower gas
        'gasPrice': 20000000000,  # 20 gwei
        'nonce': w3.eth.get_transaction_count(account.address),
        'chainId': 10143
    }
    
    print("üì§ Deploying minimal contract...")
    
    signed_txn = w3.eth.account.sign_transaction(transaction, private_key)
    tx_hash = w3.eth.send_raw_transaction(signed_txn.raw_transaction)
    
    print(f"‚è≥ TX: {tx_hash.hex()}")
    
    receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
    
    if receipt.status == 1:
        contract_address = receipt.contractAddress
        print(f"‚úÖ Contract deployed: {contract_address}")
        print(f"üîó Explorer: https://testnet-explorer.monad.xyz/address/{contract_address}")
        
        # Update config
        config_content = f"""
# MONAD Testnet Configuration for Krishi Sahayak

MONAD_TESTNET_CONFIG = {{
    'network_name': 'MONAD Testnet',
    'chain_id': 10143,
    'rpc_url': 'https://testnet-rpc.monad.xyz',
    'explorer_url': 'https://testnet-explorer.monad.xyz',
    'currency_symbol': 'MON',
    'currency_decimals': 18,
    'block_time': 1,
}}

CONTRACT_ADDRESSES = {{
    'crop_passport': '{contract_address}',
    'weather_insurance': None,
}}

IPFS_CONFIG = {{
    'gateway': 'https://gateway.pinata.cloud/ipfs/',
    'api_endpoint': 'https://api.pinata.cloud',
    'upload_endpoint': 'https://api.pinata.cloud/pinning/pinFileToIPFS'
}}

GAS_CONFIG = {{
    'gas_limit': 200000,
    'gas_price': 20000000000,
    'max_fee_per_gas': 50000000000,
    'max_priority_fee_per_gas': 20000000000,
}}
"""
        
        with open('../blockchain/monad_config.py', 'w') as f:
            f.write(config_content)
        
        return contract_address
    else:
        print("‚ùå Deployment failed")
        return None

if __name__ == "__main__":
    deploy_simple_contract()