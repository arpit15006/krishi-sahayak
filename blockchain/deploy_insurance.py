"""
Deploy Weather Insurance Contract to MONAD
"""

import os
from web3 import Web3
from eth_account import Account
from dotenv import load_dotenv

load_dotenv('../.env')

def deploy_insurance_contract():
    w3 = Web3(Web3.HTTPProvider("https://testnet-rpc.monad.xyz"))
    
    private_key = os.getenv('MONAD_PRIVATE_KEY').strip('"')
    account = Account.from_key(private_key)
    
    print(f"‚úÖ Connected to MONAD")
    print(f"üìù Account: {account.address}")
    
    # Weather Insurance Contract Bytecode (compiled)
    bytecode = "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506108fc806100606000396000f3fe6080604052600436106100705760003560e01c80638da5cb5b1161004e5780638da5cb5b146100f8578063a2fb117514610123578063f2fde38b1461014c578063f3fef3a31461017557610070565b8063715018a61461007557806371e2a6571461008c5780637b3e5e7b146100b5575b600080fd5b34801561008157600080fd5b5061008a61019e565b005b34801561009857600080fd5b506100b360048036038101906100ae9190610654565b6101b2565b005b3480156100c157600080fd5b506100dc60048036038101906100d79190610681565b610285565b6040516100ef9796959493929190610700565b60405180910390f35b34801561010457600080fd5b5061010d610350565b60405161011a9190610777565b60405180910390f35b34801561012f57600080fd5b5061014a60048036038101906101459190610792565b610376565b005b34801561015857600080fd5b50610173600480360381019061016e9190610681565b6104a9565b005b34801561018157600080fd5b5061019c600480360381019061019791906107d2565b61052c565b005b6101a661062f565b6101b060006106ad565b565b6101ba61062f565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000160009054906101000a900460ff1661024d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102449061085e565b60405180910390fd5b60008160020154905060008260000160006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050505050565b60016020528060005260406000206000915090508060000160009054906101000a900460ff16908060010154908060020154908060030154908060040154908060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060060154905087565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b66038d7ea4c6800034101561038a57600080fd5b6040518060e00160405280600115158152602001348152602001600a3402815260200183815260200142815260200133815260200160008152506001600033815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160010155604082015181600201556060820151816003015560808201518160040155600a0820151816005016000610100a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c0820151816006015590505033817f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925346040516104a091906108b5565b60405180910390a350565b6104b161062f565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610520576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051790610942565b60405180910390fd5b610529816106ad565b50565b61053461062f565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000160009054906101000a900460ff166105c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105be9061085e565b60405180910390fd5b60008160020154905060008260000160006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610629575b5050505050565b610637610771565b73ffffffffffffffffffffffffffffffffffffffff1661065561035050565b73ffffffffffffffffffffffffffffffffffffffff16146106ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a2906109ae565b60405180910390fd5b565b60008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600080fd5b6000819050919050565b610702816106ef565b811461070d57600080fd5b50565b60008135905061071f816106f9565b92915050565b60008115159050919050565b61073a81610725565b82525050565b610749816106ef565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061077a8261074f565b9050919050565b61078a8161076f565b82525050565b600060e08201905061079560008301886107315b90506107a46020830187610740565b6107b16040830186610740565b6107be6060830185610740565b6107cb6080830184610740565b6107d860a0830183610781565b6107e560c0830182610740565b9695505050505050565b6107f88161076f565b811461080357600080fd5b50565b600081359050610815816107ef565b92915050565b60006020828403121561083157610830610100ea565b5b600061083f84828501610806565b91505092915050565b600082825260208201905092915050565b7f4e6f20616374697665207061636b616765000000000000000000000000000000600082015250565b600061088f601183610848565b915061089a82610859565b602082019050919050565b600060208201905081810360008301526108be81610882565b9050919050565b60006020820190506108da6000830184610740565b92915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061093c602683610848565b9150610947826108e0565b604082019050919050565b6000602082019050818103600083015261096b8161092f565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006109a8602083610848565b91506109b382610972565b602082019050919050565b600060208201905081810360008301526109d78161099b565b905091905056fea2646970667358221220abcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdef64736f6c63430008130033"
    
    # Get current gas price
    gas_price = w3.eth.gas_price
    high_gas_price = int(gas_price * 2)
    
    transaction = {
        'from': account.address,
        'data': bytecode,
        'gas': 500000,
        'gasPrice': high_gas_price,
        'nonce': w3.eth.get_transaction_count(account.address),
        'chainId': 10143
    }
    
    print(f"üì§ Deploying insurance contract...")
    
    signed_txn = w3.eth.account.sign_transaction(transaction, private_key)
    tx_hash = w3.eth.send_raw_transaction(signed_txn.raw_transaction)
    
    print(f"‚è≥ TX: {tx_hash.hex()}")
    
    try:
        receipt = w3.eth.wait_for_transaction_receipt(tx_hash, timeout=120)
        
        if receipt.status == 1:
            contract_address = receipt.contractAddress
            print(f"‚úÖ Insurance contract deployed: {contract_address}")
            print(f"üîó Explorer: https://testnet-explorer.monad.xyz/address/{contract_address}")
            
            # Update config
            with open('../blockchain/monad_config.py', 'r') as f:
                content = f.read()
            
            content = content.replace(
                "'weather_insurance': None,",
                f"'weather_insurance': '{contract_address}',"
            )
            
            with open('../blockchain/monad_config.py', 'w') as f:
                f.write(content)
            
            return contract_address
        else:
            print(f"‚ùå Deployment failed. Status: {receipt.status}")
            return None
            
    except Exception as e:
        print(f"‚ùå Deployment failed: {e}")
        return None

if __name__ == "__main__":
    deploy_insurance_contract()