import os
import requests
import logging
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

def predict_crop_yield(crop_type, area_acres, location_data, weather_data):
    """AI-powered crop yield prediction using Gemini API"""
    
    try:
        gemini_key = os.getenv('GEMINI_API_KEY', 'AIzaSyCVchsFQ9RyH4wdM2qrVZqRBJyQ5g9qOKg')
        
        url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key={gemini_key}"
        headers = {"Content-Type": "application/json"}
        
        # Create context-rich prompt for yield prediction
        current_temp = weather_data.get('current', {}).get('temperature', 25)
        rainfall = weather_data.get('forecast', [{}])[0].get('precipitation', 0)
        
        prompt = f"""‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§ï‡•É‡§∑‡§ø ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§´‡§∏‡§≤ ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§® ‡§ï‡•Ä ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§µ‡§æ‡§£‡•Ä ‡§ï‡§∞‡•á‡§Ç:

‡§´‡§∏‡§≤: {crop_type}
‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡§´‡§≤: {area_acres} ‡§è‡§ï‡§°‡§º
‡§∏‡•ç‡§•‡§æ‡§®: {location_data.get('pin_code', '‡§≠‡§æ‡§∞‡§§')}
‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§§‡§æ‡§™‡§Æ‡§æ‡§®: {current_temp}¬∞C
‡§¨‡§æ‡§∞‡§ø‡§∂: {rainfall}mm

‡§ï‡•É‡§™‡§Ø‡§æ ‡§®‡§ø‡§Æ‡•ç‡§®‡§≤‡§ø‡§ñ‡§ø‡§§ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡•á‡§Ç:
1. ‡§Ö‡§®‡•Å‡§Æ‡§æ‡§®‡§ø‡§§ ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§® (‡§ï‡•ç‡§µ‡§ø‡§Ç‡§ü‡§≤ ‡§Æ‡•á‡§Ç)
2. ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§® ‡§ï‡•Ä ‡§ó‡•Å‡§£‡§µ‡§§‡•ç‡§§‡§æ (‡§â‡§§‡•ç‡§ï‡•É‡§∑‡•ç‡§ü/‡§Ö‡§ö‡•ç‡§õ‡•Ä/‡§î‡§∏‡§§)
3. ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§∏‡•Å‡§ù‡§æ‡§µ (2-3 ‡§¨‡§ø‡§Ç‡§¶‡•Å)
4. ‡§ú‡•ã‡§ñ‡§ø‡§Æ ‡§ï‡§æ‡§∞‡§ï (‡§Ø‡§¶‡§ø ‡§ï‡•ã‡§à ‡§π‡•ã)

‡§∏‡§Ç‡§ï‡•ç‡§∑‡§ø‡§™‡•ç‡§§ ‡§î‡§∞ ‡§µ‡•ç‡§Ø‡§æ‡§µ‡§π‡§æ‡§∞‡§ø‡§ï ‡§â‡§§‡•ç‡§§‡§∞ ‡§¶‡•á‡§Ç‡•§"""
        
        data = {
            "contents": [{
                "parts": [{"text": prompt}]
            }],
            "generationConfig": {
                "temperature": 0.7,
                "maxOutputTokens": 300
            }
        }
        
        response = requests.post(url, json=data, headers=headers, timeout=15)
        
        if response.status_code == 200:
            result = response.json()
            if 'candidates' in result and len(result['candidates']) > 0:
                ai_response = result['candidates'][0]['content']['parts'][0]['text']
                
                # Parse the response to extract structured data
                return parse_yield_prediction(ai_response, crop_type, area_acres)
            else:
                return get_fallback_prediction(crop_type, area_acres)
        else:
            logger.error(f"Gemini API error: {response.status_code}")
            return get_fallback_prediction(crop_type, area_acres)
            
    except Exception as e:
        logger.error(f"Yield prediction error: {str(e)}")
        return get_fallback_prediction(crop_type, area_acres)

def parse_yield_prediction(ai_response, crop_type, area_acres):
    """Parse AI response into structured yield prediction"""
    
    # Extract yield estimate (basic parsing)
    lines = ai_response.split('\n')
    estimated_yield = f"{area_acres * 15}-{area_acres * 25} ‡§ï‡•ç‡§µ‡§ø‡§Ç‡§ü‡§≤"  # Default range
    
    for line in lines:
        if any(keyword in line for keyword in ['‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§®', '‡§ï‡•ç‡§µ‡§ø‡§Ç‡§ü‡§≤', '‡§ü‡§®']):
            if any(char.isdigit() for char in line):
                estimated_yield = line.strip()
                break
    
    return {
        'crop_type': crop_type,
        'area_acres': area_acres,
        'estimated_yield': estimated_yield,
        'prediction_text': ai_response,
        'confidence': '‡§Æ‡§ß‡•ç‡§Ø‡§Æ (Medium)',
        'prediction_date': datetime.now().strftime('%Y-%m-%d'),
        'factors': {
            'weather_impact': '‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø',
            'soil_quality': '‡§Ö‡§ö‡•ç‡§õ‡•Ä',
            'season_suitability': '‡§â‡§™‡§Ø‡•Å‡§ï‡•ç‡§§'
        }
    }

def get_fallback_prediction(crop_type, area_acres):
    """Fallback prediction when AI fails"""
    
    # Basic yield estimates per acre for common crops
    yield_per_acre = {
        'Rice': 20,
        'Wheat': 25,
        'Sugarcane': 300,
        'Cotton': 8,
        'Maize': 30,
        'Potato': 150,
        'Onion': 200
    }
    
    base_yield = yield_per_acre.get(crop_type, 20)
    estimated_total = base_yield * area_acres
    
    return {
        'crop_type': crop_type,
        'area_acres': area_acres,
        'estimated_yield': f"{estimated_total} ‡§ï‡•ç‡§µ‡§ø‡§Ç‡§ü‡§≤ (‡§Ö‡§®‡•Å‡§Æ‡§æ‡§®‡§ø‡§§)",
        'prediction_text': f"""üåæ **‡§´‡§∏‡§≤ ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§® ‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§®‡•Å‡§Æ‡§æ‡§®**

**‡§Ö‡§®‡•Å‡§Æ‡§æ‡§®‡§ø‡§§ ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§®:** {estimated_total} ‡§ï‡•ç‡§µ‡§ø‡§Ç‡§ü‡§≤
**‡§ó‡•Å‡§£‡§µ‡§§‡•ç‡§§‡§æ:** ‡§Ö‡§ö‡•ç‡§õ‡•Ä (‡§Æ‡§æ‡§®‡§ï ‡§ï‡•É‡§∑‡§ø ‡§™‡§¶‡•ç‡§ß‡§§‡§ø ‡§ï‡•á ‡§∏‡§æ‡§•)

**‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§∏‡•Å‡§ù‡§æ‡§µ:**
‚Ä¢ ‡§â‡§ö‡§ø‡§§ ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§î‡§∞ ‡§â‡§∞‡•ç‡§µ‡§∞‡§ï ‡§ï‡§æ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç
‚Ä¢ ‡§ï‡•Ä‡§ü-‡§∞‡•ã‡§ó ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§£ ‡§™‡§∞ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡•á‡§Ç
‚Ä¢ ‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•Ä ‡§®‡§ø‡§ó‡§∞‡§æ‡§®‡•Ä ‡§ï‡§∞‡§§‡•á ‡§∞‡§π‡•á‡§Ç

**‡§®‡•ã‡§ü:** ‡§Ø‡§π ‡§Ö‡§®‡•Å‡§Æ‡§æ‡§® ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§™‡§∞‡§ø‡§∏‡•ç‡§•‡§ø‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§™‡§∞ ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§π‡•à‡•§""",
        'confidence': '‡§¨‡•Å‡§®‡§ø‡§Ø‡§æ‡§¶‡•Ä (Basic)',
        'prediction_date': datetime.now().strftime('%Y-%m-%d'),
        'factors': {
            'weather_impact': '‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø',
            'soil_quality': '‡§î‡§∏‡§§',
            'season_suitability': '‡§â‡§™‡§Ø‡•Å‡§ï‡•ç‡§§'
        }
    }